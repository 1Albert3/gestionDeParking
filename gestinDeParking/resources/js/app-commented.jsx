/**
 * APPLICATION REACT - SYST√àME DE GESTION DE PARKING
 * 
 * Architecture : Single Page Application (SPA)
 * Pattern : Context API + Hooks + Functional Components
 * 
 * Structure :
 * - AuthProvider : Gestion globale de l'authentification
 * - Router : Navigation entre les pages
 * - Composants : Login, Dashboard, CRUD pages
 * 
 * Communication : Axios ‚Üí Laravel API ‚Üí MySQL
 */

// Import de la configuration Axios (communication avec Laravel)
import './bootstrap';

// Imports React essentiels
import React, { createContext, useContext, useState, useEffect } from 'react';
import { createRoot } from 'react-dom/client';

// Imports React Router pour la navigation SPA
import { BrowserRouter as Router, Routes, Route, Navigate, useNavigate, Link, useLocation, Outlet } from 'react-router-dom';

// Import Axios pour les requ√™tes HTTP
import axios from 'axios';

/*
|--------------------------------------------------------------------------
| SYST√àME D'AUTHENTIFICATION GLOBAL (Context API)
|--------------------------------------------------------------------------
| Pattern : Context + Provider pour partager l'√©tat d'authentification
| dans toute l'application sans prop drilling
*/

/**
 * CONTEXTE D'AUTHENTIFICATION
 * 
 * Cr√©e un "conteneur" global pour stocker :
 * - L'utilisateur connect√©
 * - Les fonctions de connexion/d√©connexion
 * - L'√©tat de chargement
 */
const AuthContext = createContext();

/**
 * HOOK PERSONNALIS√â POUR ACC√âDER AU CONTEXTE
 * 
 * Simplifie l'utilisation du contexte dans les composants
 * Usage : const { user, login, logout } = useAuth();
 */
const useAuth = () => useContext(AuthContext);

/**
 * PROVIDER D'AUTHENTIFICATION
 * 
 * Composant qui englobe toute l'application et fournit
 * les fonctionnalit√©s d'authentification √† tous les enfants
 * 
 * Responsabilit√©s :
 * - G√©rer l'√©tat de l'utilisateur connect√©
 * - Persister la session (localStorage + token)
 * - Fournir les m√©thodes login/logout
 * - V√©rifier automatiquement la session au d√©marrage
 */
function AuthProvider({ children }) {
    
    /*
     * √âTATS LOCAUX DU PROVIDER
     */
    
    // Utilisateur connect√© (null si non connect√©)
    const [user, setUser] = useState(null);
    
    // √âtat de chargement (true pendant la v√©rification initiale)
    const [loading, setLoading] = useState(true);

    /**
     * V√âRIFICATION AUTOMATIQUE AU D√âMARRAGE
     * 
     * useEffect avec tableau vide [] = ex√©cut√© une seule fois au montage
     * V√©rifie si un token existe dans localStorage
     */
    useEffect(() => {
        // R√©cup√©ration du token stock√© localement
        const token = localStorage.getItem('token');
        
        if (token) {
            // Si token existe : configuration d'Axios et v√©rification utilisateur
            axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;
            fetchUser(); // R√©cup√®re les infos utilisateur depuis l'API
        } else {
            // Si pas de token : arr√™t du chargement
            setLoading(false);
        }
    }, []); // Tableau vide = ex√©cution unique

    /**
     * R√âCUP√âRATION DES INFORMATIONS UTILISATEUR
     * 
     * Fonction asynchrone qui v√©rifie la validit√© du token
     * en r√©cup√©rant les infos utilisateur depuis l'API
     */
    const fetchUser = async () => {
        try {
            // Requ√™te GET vers Laravel pour r√©cup√©rer l'utilisateur connect√©
            const response = await axios.get('/api/user');
            
            // Si succ√®s : stockage de l'utilisateur
            setUser(response.data);
            
        } catch (error) {
            // Si erreur (token invalide/expir√©) : nettoyage
            localStorage.removeItem('token');
            delete axios.defaults.headers.common['Authorization'];
            
        } finally {
            // Dans tous les cas : arr√™t du chargement
            setLoading(false);
        }
    };
    
    /**
     * FONCTION DE CONNEXION
     * 
     * Processus complet d'authentification :
     * 1. Envoi des identifiants √† Laravel
     * 2. R√©ception user + token
     * 3. Stockage local et configuration Axios
     * 4. Mise √† jour de l'√©tat global
     */
    const login = async (email, password) => {
        // √âTAPE 1 : Requ√™te de connexion vers Laravel
        const response = await axios.post('/api/login', { email, password });
        
        // √âTAPE 2 : Extraction des donn√©es de r√©ponse
        const { user: userData, token } = response.data;
        
        // √âTAPE 3 : Stockage de l'utilisateur dans l'√©tat React
        setUser(userData);
        
        // √âTAPE 4 : Persistance du token dans le navigateur
        localStorage.setItem('token', token);
        
        // √âTAPE 5 : Configuration d'Axios pour les futures requ√™tes
        axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;
        
        // √âTAPE 6 : Retour de l'utilisateur (optionnel)
        return userData;
    };

    /**
     * FONCTION DE D√âCONNEXION
     * 
     * Nettoyage complet de la session :
     * 1. Suppression de l'√©tat utilisateur
     * 2. Suppression du token local
     * 3. Suppression des headers Axios
     */
    const logout = () => {
        // R√©initialisation de l'√©tat utilisateur
        setUser(null);
        
        // Suppression du token du navigateur
        localStorage.removeItem('token');
        
        // Suppression des headers d'authentification
        delete axios.defaults.headers.common['Authorization'];
    };

    /**
     * RENDU DU PROVIDER
     * 
     * Fournit les valeurs du contexte √† tous les composants enfants
     * Condition : n'affiche les enfants que quand le chargement est termin√©
     */
    return (
        <AuthContext.Provider value={{ user, login, logout, loading }}>
            {!loading && children}
        </AuthContext.Provider>
    );
}

/**
 * COMPOSANT DE CONNEXION
 * 
 * Interface de login avec :
 * - Formulaire email/password
 * - Gestion des √©tats (chargement, erreurs)
 * - Redirection apr√®s connexion r√©ussie
 * - Design moderne avec Tailwind CSS
 */
function Login() {
    
    /*
     * √âTATS LOCAUX DU COMPOSANT
     */
    
    // Champs du formulaire (controlled components)
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    
    // √âtat de chargement pour le bouton de soumission
    const [loading, setLoading] = useState(false);
    
    /*
     * HOOKS POUR LES FONCTIONNALIT√âS
     */
    
    // Acc√®s aux fonctions d'authentification
    const { login } = useAuth();
    
    // Hook de navigation pour rediriger apr√®s connexion
    const navigate = useNavigate();

    /**
     * GESTIONNAIRE DE SOUMISSION DU FORMULAIRE
     * 
     * Processus :
     * 1. Pr√©vention du rechargement de page
     * 2. Activation du loading
     * 3. Tentative de connexion
     * 4. Redirection si succ√®s, erreur si √©chec
     * 5. D√©sactivation du loading
     */
    const handleSubmit = async (e) => {
        // √âTAPE 1 : Emp√™cher le comportement par d√©faut du formulaire
        e.preventDefault();
        
        // √âTAPE 2 : Activation de l'√©tat de chargement
        setLoading(true);
        
        try {
            // √âTAPE 3 : Tentative de connexion
            await login(email, password);
            
            // √âTAPE 4 : Redirection vers le dashboard si succ√®s
            navigate('/');
            
        } catch (error) {
            // √âTAPE 5 : Affichage d'erreur si √©chec
            alert('Erreur de connexion');
            
        } finally {
            // √âTAPE 6 : D√©sactivation du loading dans tous les cas
            setLoading(false);
        }
    };

    /**
     * RENDU DU COMPOSANT LOGIN
     * 
     * Interface avec :
     * - Design glassmorphism
     * - Formulaire contr√¥l√©
     * - √âtats de chargement
     * - Comptes de d√©monstration
     */
    return (
        <div className="min-h-screen gradient-bg flex items-center justify-center p-6">
            <div className="w-full max-w-md">
                <div className="glass rounded-3xl p-8 shadow-2xl fade-in">
                    
                    {/* EN-T√äTE AVEC LOGO ET TITRE */}
                    <div className="text-center mb-8">
                        <div className="text-7xl mb-6 animate-bounce">üÖøÔ∏è</div>
                        <h1 className="text-4xl font-bold text-white mb-3">Parking Pro</h1>
                        <p className="text-blue-100 text-lg">Gestion intelligente de parking</p>
                    </div>
                    
                    {/* FORMULAIRE DE CONNEXION */}
                    <form onSubmit={handleSubmit} className="space-y-6">
                        
                        {/* CHAMP EMAIL */}
                        <div>
                            <input
                                type="email"
                                placeholder="Adresse email"
                                className="form-input w-full px-6 py-4 rounded-2xl bg-white/90 text-gray-800 placeholder-gray-500 font-medium"
                                value={email}
                                onChange={(e) => setEmail(e.target.value)} // Controlled component
                                required
                            />
                        </div>
                        
                        {/* CHAMP MOT DE PASSE */}
                        <div>
                            <input
                                type="password"
                                placeholder="Mot de passe"
                                className="form-input w-full px-6 py-4 rounded-2xl bg-white/90 text-gray-800 placeholder-gray-500 font-medium"
                                value={password}
                                onChange={(e) => setPassword(e.target.value)} // Controlled component
                                required
                            />
                        </div>
                        
                        {/* BOUTON DE SOUMISSION */}
                        <button 
                            type="submit" 
                            disabled={loading} // D√©sactiv√© pendant le chargement
                            className="btn-primary w-full py-4 rounded-2xl text-white font-bold text-lg shadow-lg disabled:opacity-50"
                        >
                            {loading ? (
                                // Affichage pendant le chargement
                                <div className="flex items-center justify-center">
                                    <div className="loading-spinner w-6 h-6 border-2 border-white border-t-transparent rounded-full mr-3"></div>
                                    Connexion...
                                </div>
                            ) : (
                                // Affichage normal
                                'Se connecter'
                            )}
                        </button>
                    </form>
                    
                    {/* COMPTES DE D√âMONSTRATION */}
                    <div className="mt-8 glass rounded-2xl p-4">
                        <p className="text-white font-semibold mb-3 text-center">üîë Comptes de d√©monstration</p>
                        <div className="text-blue-100 text-sm space-y-2">
                            <div className="flex justify-between">
                                <span>üë®üíº Admin:</span>
                                <span>admin@parking.com</span>
                            </div>
                            <div className="flex justify-between">
                                <span>üë§ Agent:</span>
                                <span>agent@parking.com</span>
                            </div>
                            <div className="flex justify-between">
                                <span>üîê Mot de passe:</span>
                                <span>password</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
}

/*
 * FLUX COMPLET D'AUTHENTIFICATION :
 * 
 * 1. D√âMARRAGE APPLICATION :
 *    - AuthProvider v√©rifie localStorage
 *    - Si token ‚Üí fetchUser() ‚Üí setUser()
 *    - Si pas token ‚Üí affichage Login
 * 
 * 2. PROCESSUS DE CONNEXION :
 *    - User saisit email/password
 *    - handleSubmit() ‚Üí login() ‚Üí axios.post('/api/login')
 *    - Laravel v√©rifie ‚Üí retourne user + token
 *    - Stockage localStorage + √©tat React
 *    - Redirection vers dashboard
 * 
 * 3. REQU√äTES AUTHENTIFI√âES :
 *    - Axios configur√© avec Bearer token
 *    - Toutes les requ√™tes incluent automatiquement l'authentification
 *    - Middleware Laravel v√©rifie le token
 * 
 * 4. D√âCONNEXION :
 *    - logout() nettoie tout
 *    - Redirection automatique vers login
 * 
 * AVANTAGES DE CETTE ARCHITECTURE :
 * - √âtat global partag√© (pas de prop drilling)
 * - Persistance de session
 * - S√©curit√© par tokens
 * - UX fluide (SPA)
 * - Code r√©utilisable et maintenable
 */